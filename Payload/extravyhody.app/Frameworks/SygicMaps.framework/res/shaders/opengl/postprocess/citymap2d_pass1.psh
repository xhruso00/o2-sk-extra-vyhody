
// ------- UNIFORMS (SHADER CONSTS) -------
uniform sampler2D	hu_sSceneTexture0;
uniform sampler2D	hu_sDepthTexture0;
uniform vec4		hu_vCameraNearFar;
uniform mat4		hu_mPIMatrix;

uniform vec4		u_vAlphaDistanceFunction;
uniform vec4		u_vAlphaDistanceFunctionOutline;
uniform vec4		u_vOutlineColor;
uniform float		u_fMaxDistance;

// ------- INTERPOLATORS (SHADER INPUTS) -------
varying vec2		v_vTex0UV;
varying vec2		v_vUV0;
varying vec2		v_vUV1;
varying vec2		v_vUV2;
varying vec2		v_vUV3;

// ------- FUNCTIONS ------- 

void main(void)
{
	vec4_hp f = texture2D(hu_sSceneTexture0, v_vTex0UV);

	if (f.b < 0.99)
	{
		float_hp fDist = GetDistanceFromEyeHP(hu_sDepthTexture0, v_vTex0UV, hu_mPIMatrix);

		bool b = f.a <= texture2D(hu_sSceneTexture0, v_vUV0).a
			&& f.a <= texture2D(hu_sSceneTexture0, v_vUV1).a
			&& f.a <= texture2D(hu_sSceneTexture0, v_vUV2).a
			&& f.a <= texture2D(hu_sSceneTexture0, v_vUV3).a;

		vec4 func = b ? u_vAlphaDistanceFunction : u_vAlphaDistanceFunctionOutline;
		f.a = GetGrowingValue(func, fDist);
		if (!b)
		{	// outline
			f.rgb = u_vOutlineColor.rgb;
			f.a = f.a * u_vOutlineColor.a;
		}

		float fBlendFromMax = 0.1; // 10% from max distance
		float fDistToMax = u_fMaxDistance - fDist;
		if (fDistToMax < 0.0)
		{
			f.a = 0.0;
		}
		else if (fDist > (1.0 - fBlendFromMax)*u_fMaxDistance)
		{
			f.a *= fDistToMax/(fBlendFromMax*u_fMaxDistance);
		}
	}
	else
	{
		f.a = 0.0;
	}

	gl_FragColor = f;
}
